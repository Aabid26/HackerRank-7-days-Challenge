class Solution {
public:
    string numberToWords(int num) {
       long num1=(long)num;
// n is 1- or 2-digit number
string str=convertToWords(num1);
string temp=trim(str);
	//temp.erase(std::remove_if(temp.begin(), temp.end(), ::isspace), temp.end());

//return str;

return temp;
}
// Function to print a given number in words
 string convertToWords(long num)
{
    // stores word representation of given number n
    string out;
     out += numToWords(((num /1000000000) % 10), " Billion ");     
       
                if(((num%100000000)==0) || (((num/1000000)%100)==0))
 out += numToWords(((num /100000000) % 10), " Hundred Million ");
                else
       out += numToWords(((num /100000000) % 10) , " Hundred ");
       
    
    // handles digits at hundred thousands and one
    // millions places (if any)
    out += numToWords(((num / 1000000) % 100), " Million ");
           if (((num%100000)==0) || (((num/1000)%100)==0))
       out += numToWords(((num / 100000) % 10), " Hundred Thousand ");
     else
 // handles digit at hundreds places (if any)
    out += numToWords(((num / 100000) % 10), " Hundred ");
        
    // handles digits at thousands and tens thousands
    // places (if any)
    out += numToWords(((num / 1000) % 100), " Thousand ");
 
    // handles digit at hundreds places (if any)
    out += numToWords(((num / 100) % 10), " Hundred ");

    // handles digits at ones and tens places (if any)
    out += numToWords((num % 100),"");
   
    //Handling the n=0 case
    if(out=="")
    out = "Zero";

    return out;
};

    
string numToWords(long num, string s)
     
{
 string one[] = { "", "One", "Two", "Three", "Four",
                 "Five", "Six", "Seven", "Eight",
                 "Nine", "Ten", "Eleven", "Twelve",
                 "Thirteen", "Fourteen", "Fifteen",
                 "Sixteen", "Seventeen", "Eighteen",
                 "Nineteen" };
 
// strings at index 0 and 1 are not used, they is to
// make array indexing simple
string ten[] = { "", "", "Twenty", "Thirty", "Forty",
                 "Fifty", "Sixty", "Seventy", "Eighty",
                 "Ninety" };
 
   string str;
    // if n is more than 19, divide it
    if ((num > 19) && (num%10!=0))
        str +=ten[num / 10]+" "+one[num % 10];
    else if ((num > 19) && (num%10==0))
        str +=ten[num / 10];
    
    else 
        str += one[num];
 
    // if n is non-zero
    if (num)   str += s;
    return str;
};

std::string trim(const std::string &s)
{
	auto start = s.begin();
	while (start != s.end() && std::isspace(*start)) {
		start++;
	}

	auto end = s.end();
	do {
		end--;
	} while (std::distance(start, end) > 0 && std::isspace(*end));

	return std::string(start, end + 1);
};
};
